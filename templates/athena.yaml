AWSTemplateFormatVersion: 2010-09-09
Description: 'The AWS CloudFormation template creates KMS encryption keys for Config and S3, an encrypted S3 bucket, and enables Config for the account'
Parameters:
  EMAIL:
    Default: 'souheib.abdelhak.3@gmail.com'
    Description: Please enter email for sns notification from config service
    Type: String

Resources:

  # Build AWS Config Service S3 Bucket for Storage
  AWSConfigS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'config-bucket-${AWS::AccountId}'
      AccessControl: Private

  # Build AWS Config Recorder
  ConfigRecorder:
    Type: 'AWS::Config::ConfigurationRecorder'
    Properties:
      Name: 'ConfigRecoder'
      
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt
        - AWSConfigIAM
        - Arn

  # Build IAM Role for Config
  AWSConfigIAM:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWS_ConfigRole'
      Path: /
      Policies:
        - PolicyName: S3-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref AWSConfigS3Bucket
                    - /AWSLogs/
                    - !Ref 'AWS::AccountId'
                    - /*
                Condition:
                  StringLike:
                    's3:x-amz-acl': bucket-owner-full-control
              - Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref AWSConfigS3Bucket

  # Create Config Delivery Channel
  DeliveryChannel:
    Type: 'AWS::Config::DeliveryChannel'
    DependsOn:  AWSConfigS3Bucket
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: 'TwentyFour_Hours'
      S3BucketName: !Ref AWSConfigS3Bucket
      SnsTopicARN: !Ref SNSTopic

  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'Config SNS Topic'
      Subscription:
      - Endpoint: !Ref EMAIL
        Protocol: email
      

  AtenaTable:
    Type: AWS::Athena::NamedQuery
    DependsOn:  AWSConfigS3Bucket
    Properties:
      Database: "default"
      Description: "A query that Create new table in Athena for Config data" 
      Name: "AthenaTableCreate"
      QueryString: !Sub |
          CREATE EXTERNAL TABLE aws_config_configuration_snapshot (
          fileversion STRING,
          configsnapshotid STRING,
          configurationitems ARRAY < STRUCT <
                  configurationItemVersion : STRING,
                  configurationItemCaptureTime : STRING,
                  configurationStateId : BIGINT,
                  awsAccountId : STRING,
                  configurationItemStatus : STRING,
                  resourceType : STRING,
                  resourceId : STRING,
                  resourceName : STRING,
                  ARN : STRING,
                  awsRegion : STRING,
                  availabilityZone : STRING,
                  configurationStateMd5Hash : STRING,
                  configuration : STRING,
                  supplementaryConfiguration : MAP <STRING, STRING>,
                  tags: MAP <STRING, STRING> ,
                  resourceCreationTime : STRING > >
          ) 
          PARTITIONED BY ( accountid STRING, dt STRING, region STRING )
          ROW FORMAT SERDE 
          'org.openx.data.jsonserde.JsonSerDe' 
          WITH SERDEPROPERTIES ( 
            'case.insensitive'='false',
            'mapping.fileversion'='fileVersion',
            'mapping.configsnapshotid'='configSnapshotId',
            'mapping.configurationitems'='configurationItems',
            'mapping.configurationitemversion'='configurationItemVersion',
            'mapping.configurationitemcapturetime'='configurationItemCaptureTime',
            'mapping.configurationstateid'='configurationStateId',
            'mapping.awsaccountid'='awsAccountId',
            'mapping.configurationitemstatus'='configurationItemStatus',
            'mapping.resourcetype'='resourceType',
            'mapping.resourceid'='resourceId',
            'mapping.resourcename'='resourceName',
            'mapping.arn'='ARN',
            'mapping.awsregion'='awsRegion',
            'mapping.availabilityzone'='availabilityZone',
            'mapping.configurationstatemd5hash'='configurationStateMd5Hash',
            'mapping.supplementaryconfiguration'='supplementaryConfiguration',
            'mapping.configurationstateid'='configurationStateId'
            )
          LOCATION 's3://${AWSConfigS3Bucket}/AWSLogs/';

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: amiLambdaRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaAthenaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "athena:StartQueryExecution"
                  - "athena:GetQueryExecution"
                Resource:
                  - !Sub 'arn:aws:atheena:${AWS::Region}:${AWS::AccountId}:workgroup/primary'

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction
    Properties:
      FunctionName:
        Fn::GetAtt:
          - LambdaFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${AWSConfigS3Bucket}

#Lambda Function to update SSM parameter
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:  AWSConfigS3Bucket
    Properties:
      FunctionName: AthenaTablePratition
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      
      Runtime: python3.11
      Code:
        ZipFile: |  
            import datetime
            import re
            import boto3
            import os

            TABLE_NAME = 'aws_config_configuration_snapshot'
            DATABASE_NAME = 'default'
            ACCOUNT_ID = None # Determined at runtime
            LATEST_PARTITION_VALUE = 'latest'

            athena = boto3.client('athena')

            def lambda_handler(event, context):
                global ACCOUNT_ID

                object_key = event['Records'][0]['s3']['object']['key']
                match = get_configuration_snapshot_object_key_match(object_key)
                if match is None:
                    print('Ignoring event for non-configuration snapshot object key', object_key)
                    return
                print('Adding partitions for configuration snapshot object key', object_key)
                
                ACCOUNT_ID = context.invoked_function_arn.split(':')[4]
                object_key_parent = 's3://{bucket_name}/{object_key_parent}/'.format(
                    bucket_name=event['Records'][0]['s3']['bucket']['name'],
                    object_key_parent=os.path.dirname(object_key))
                configuration_snapshot_accountid = get_configuration_snapshot_accountid(match)
                configuration_snapshot_region = get_configuration_snapshot_region(match)
                configuration_snapshot_date = get_configuration_snapshot_date(match)
                
                drop_partition(configuration_snapshot_accountid, configuration_snapshot_region, LATEST_PARTITION_VALUE)
                add_partition(configuration_snapshot_accountid, configuration_snapshot_region, LATEST_PARTITION_VALUE, object_key_parent)
                add_partition(configuration_snapshot_accountid, configuration_snapshot_region, get_configuration_snapshot_date(match).strftime('%Y-%m-%d'), object_key_parent)
                
            def get_configuration_snapshot_object_key_match(object_key):
                # Matches object keys like AWSLogs/123456789012/Config/us-east-1/2018/4/11/ConfigSnapshot/123456789012_Config_us-east-1_ConfigSnapshot_20180411T054711Z_a970aeff-cb3d-4c4e-806b-88fa14702hdb.json.gz
                return re.match('AWSLogs/(\d+)/Config/([\w-]+)/(\d+)/(\d+)/(\d+)/ConfigSnapshot/[^\\\]+$', object_key)

            def get_configuration_snapshot_accountid(match):
                print('AccountId:', match.group(1))
                return match.group(1)

            def get_configuration_snapshot_region(match):
                return match.group(2)

            def get_configuration_snapshot_date(match):
                return datetime.date(int(match.group(3)), int(match.group(4)), int(match.group(5)))
                
            def add_partition(accountid_partition_value, region_partition_value, dt_partition_value, partition_location):
                execute_query('ALTER TABLE {table_name} ADD PARTITION {partition} location \'{partition_location}\''.format(
                    table_name=TABLE_NAME,
                    partition=build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value),
                    partition_location=partition_location))
                    
            def drop_partition(accountid_partition_value, region_partition_value, dt_partition_value):
                execute_query('ALTER TABLE {table_name} DROP PARTITION {partition}'.format(
                    table_name=TABLE_NAME,
                    partition=build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value)))
                    
            def build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value):
                return "(accountid='{accountid_partition_value}', dt='{dt_partition_value}', region='{region_partition_value}')".format(
                  accountid_partition_value=accountid_partition_value,
                    dt_partition_value=dt_partition_value,
                    region_partition_value=region_partition_value)

            def execute_query(query):
                print('Executing query:', query)
                query_output_location = 's3://aws-athena-query-results-{account_id}-{region}'.format(
                    account_id=ACCOUNT_ID,
                    region=os.environ['AWS_REGION'])
                start_query_response = athena.start_query_execution(
                    QueryString=query,
                    QueryExecutionContext={
                        'Database': DATABASE_NAME
                    },
                    ResultConfiguration={
                        'OutputLocation': query_output_location,
                    }
                )
                print('Query started')
                
                is_query_running = True
                while is_query_running:
                    get_query_execution_response = athena.get_query_execution(
                        QueryExecutionId=start_query_response['QueryExecutionId']
                    )
                    query_state = get_query_execution_response['QueryExecution']['Status']['State']
                    is_query_running = query_state in ('RUNNING','QUEUED')
                    
                    if not is_query_running and query_state != 'SUCCEEDED':
                        raise Exception('Query failed')
                print('Query completed')

